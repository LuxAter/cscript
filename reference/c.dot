digraph c {
  splines=ortho;
  "primary-expression" -> "identifier";
  "primary-expression" -> "constant";
  "primary-expression" -> "string-literal";
  "primary-expression" -> "(";
  "primary-expression" -> "expression";
  "primary-expression" -> ")";
  "postfix-expression" -> "primary-expression";
  "postfix-expression" -> "postfix-expression";
  "postfix-expression" -> "[";
  "postfix-expression" -> "expression";
  "postfix-expression" -> "]";
  "postfix-expression" -> "(";
  "postfix-expression" -> ")";
  "postfix-expression" -> "argument-expression-list";
  "postfix-expression" -> ".";
  "postfix-expression" -> "identifier";
  "postfix-expression" -> "->";
  "postfix-expression" -> "++";
  "postfix-expression" -> "--";
  "argument-expression-list" -> "assignment-expression";
  "argument-expression-list" -> "argument-expression-list,";
  "unary-expression" -> "postfix-expression";
  "unary-expression" -> "++";
  "unary-expression" -> "unary-expression";
  "unary-expression" -> "--";
  "unary-expression" -> "unary-operator";
  "unary-expression" -> "cast-expression";
  "unary-expression" -> "sizeof";
  "unary-expression" -> "(";
  "unary-expression" -> "type-name";
  "unary-expression" -> ")";
  "unary-operator" -> "&";
  "unary-operator" -> "*";
  "unary-operator" -> "+";
  "unary-operator" -> "-";
  "unary-operator" -> "~";
  "unary-operator" -> "!";
  "cast-expression" -> "unary-expression";
  "cast-expression" -> "(";
  "cast-expression" -> "type-name";
  "cast-expression" -> ")";
  "cast-expression" -> "cast-expression";
  "multiplicative-expression" -> "cast-expression";
  "multiplicative-expression" -> "multiplicative-expression";
  "multiplicative-expression" -> "*";
  "multiplicative-expression" -> "/";
  "multiplicative-expression" -> "%";
  "additive-expression" -> "multiplicative-expression";
  "additive-expression" -> "additive-expression";
  "additive-expression" -> "+";
  "additive-expression" -> "-";
  "shift-expression" -> "additive-expression";
  "shift-expression" -> "shift-expression";
  "shift-expression" -> "<<";
  "shift-expression" -> ">>";
  "relational-expression" -> "shift-expression";
  "relational-expression" -> "relational-expression";
  "relational-expression" -> "<";
  "relational-expression" -> ">";
  "relational-expression" -> "<=";
  "relational-expression" -> ">=";
  "equality-expression" -> "relational-expression";
  "equality-expression" -> "equality-expression";
  "equality-expression" -> "==";
  "equality-expression" -> "!=";
  "AND-expression" -> "equality-expression";
  "AND-expression" -> "AND-expression";
  "AND-expression" -> "&";
  "exclusive-OR-expression" -> "AND-expression";
  "exclusive-OR-expression" -> "exclusive-OR-expression";
  "exclusive-OR-expression" -> "^";
  "inclusive-OR-expression" -> "exclusive-OR-expression";
  "inclusive-OR-expression" -> "inclusive-OR-expression";
  "inclusive-OR-expression" -> "|";
  "logical-AND-expression" -> "inclusive-OR-expression";
  "logical-AND-expression" -> "logical-AND-expression";
  "logical-AND-expression" -> "&&";
  "logical-OR-expression" -> "logical-AND-expression";
  "logical-OR-expression" -> "logical-OR-expression";
  "logical-OR-expression" -> "||";
  "conditional-expression" -> "logical-OR-expression";
  "conditional-expression" -> "?";
  "conditional-expression" -> "expression";
  "conditional-expression" -> ":";
  "conditional-expression" -> "conditional-expression";
  "assignment-expression" -> "conditional-expression";
  "assignment-expression" -> "unary-expression";
  "assignment-expression" -> "assignment-operator";
  "assignment-expression" -> "assignment-expression";
  "assignment-operator" -> "=";
  "assignment-operator" -> "*=";
  "assignment-operator" -> "/=";
  "assignment-operator" -> "%=";
  "assignment-operator" -> "+=";
  "assignment-operator" -> "-=";
  "assignment-operator" -> "<<=";
  "assignment-operator" -> ">>=";
  "assignment-operator" -> "&=";
  "assignment-operator" -> "^=";
  "assignment-operator" -> "|=";
  "expression" -> "assignment-expression";
  "expression" -> "expression";
  "expression" -> ",";
  "constant-expression" -> "conditional-expression";
  "declaration" -> "declaration-specifiers";
  "declaration" -> ";";
  "declaration" -> "init-declarator-list";
  "declaration-specifiers" -> "storage-class-specifier";
  "declaration-specifiers" -> "type-specifier";
  "declaration-specifiers" -> "type-qualifier";
  "declaration-specifiers" -> "declaration-specifiers";
  "init-declarator-list" -> "init-declarator";
  "init-declarator-list" -> "init-declarator-list";
  "init-declarator-list" -> ",";
  "init-declarator" -> "declarator";
  "init-declarator" -> "=";
  "init-declarator" -> "initializer";
  "storage-class-specifier" -> "typedef";
  "storage-class-specifier" -> "extern";
  "storage-class-specifier" -> "static";
  "storage-class-specifier" -> "auto";
  "storage-class-specifier" -> "register";
  "type-specifier" -> "void";
  "type-specifier" -> "char";
  "type-specifier" -> "short";
  "type-specifier" -> "int";
  "type-specifier" -> "long";
  "type-specifier" -> "float";
  "type-specifier" -> "double";
  "type-specifier" -> "signed";
  "type-specifier" -> "unsigned";
  "type-specifier" -> "struct-or-union-specifier";
  "type-specifier" -> "enum-specifier";
  "type-specifier" -> "typedef-name";
  "struct-or-union-specifier" -> "struct-or-union";
  "struct-or-union-specifier" -> "{";
  "struct-or-union-specifier" -> "struct-declaration-list";
  "struct-or-union-specifier" -> "}";
  "struct-or-union-specifier" -> "identifier";
  "struct-or-union" -> "struct";
  "struct-or-union" -> "union";
  "struct-declaration-list" -> "struct-declaration";
  "struct-declaration-list" -> "struct-declaration-list";
  "struct-declaration" -> "specifier-qualifier-list";
  "struct-declaration" -> "struct-declarator-list;";
  "specifier-qualifier-list" -> "type-specifier";
  "specifier-qualifier-list" -> "type-qualifier";
  "specifier-qualifier-list" -> "specifier-qualifier-list";
  "struct-declarator-list" -> "struct-declarator";
  "struct-declarator-list" -> "struct-declarator-list";
  "struct-declarator-list" -> ",";
  "struct-declarator" -> "declarator";
  "struct-declarator" -> "constant-expression";
  "enum-specifier" -> "enum";
  "enum-specifier" -> "{";
  "enum-specifier" -> "enumerator-list";
  "enum-specifier" -> "}";
  "enum-specifier" -> "identifier";
  "enumerator-list" -> "enumerator";
  "enumerator-list" -> "enumerator-list";
  "enumerator-list" -> ",";
  "enumerator" -> "enumerator-constant";
  "enumerator" -> "=";
  "enumerator" -> "constant-expression";
  "enumerator-constant" -> "identifier";
  "type-qualifier" -> "const";
  "type-qualifier" -> "volatile";
  "declarator" -> "direct-declarator";
  "declarator" -> "pointer";
  "direct-declarator" -> "identifier";
  "direct-declarator" -> "(";
  "direct-declarator" -> "declarator";
  "direct-declarator" -> ")";
  "direct-declarator" -> "direct-declarator";
  "direct-declarator" -> "[";
  "direct-declarator" -> "]";
  "direct-declarator" -> "constant-expression";
  "direct-declarator" -> "parameter-type-list";
  "direct-declarator" -> "identifier-list";
  "pointer" -> "*";
  "pointer" -> "pointer";
  "pointer" -> "type-qualifier-list";
  "type-qualifier-list" -> "type-qualifier";
  "type-qualifier-list" -> "type-qualifier-list";
  "parameter-type-list" -> "parameter-list";
  "parameter-type-list" -> ",";
  "parameter-type-list" -> "...";
  "parameter-list" -> "parameter-declaration";
  "parameter-list" -> "parameter-list,";
  "parameter-declaration" -> "declaration-specifiers";
  "parameter-declaration" -> "declarator";
  "parameter-declaration" -> "abstract-declarator";
  "identifier-list" -> "identifier";
  "identifier-list" -> "identifier-list";
  "identifier-list" -> ",";
  "type-name" -> "specifier-qualifier-list";
  "type-name" -> "abstract-declarator";
  "abstract-declarator" -> "pointer";
  "abstract-declarator" -> "direct-abstract-declarator";
  "direct-abstract-declarator" -> "(";
  "direct-abstract-declarator" -> "abstract-declarator";
  "direct-abstract-declarator" -> ")";
  "direct-abstract-declarator" -> "[";
  "direct-abstract-declarator" -> "]";
  "direct-abstract-declarator" -> "constant-expression";
  "direct-abstract-declarator" -> "parameter-type-list";
  "direct-abstract-declarator" -> "direct-abstract-declarator";
  "typedef-name" -> "identifier";
  "initializer" -> "assignment-expression";
  "initializer" -> "{";
  "initializer" -> "initializer-list";
  "initializer" -> "}";
  "initializer" -> ",";
  "initializer-list" -> "initializer";
  "initializer-list" -> "initializer-list";
  "initializer-list" -> ",";
  "statement" -> "labeled-statement";
  "statement" -> "compound-statement";
  "statement" -> "expression-statement";
  "statement" -> "selection-statement";
  "statement" -> "iteration-statement";
  "statement" -> "jump-statement";
  "labeled-statement" -> "identifier";
  "labeled-statement" -> ":";
  "labeled-statement" -> "statement";
  "labeled-statement" -> "case";
  "labeled-statement" -> "constant-expression";
  "labeled-statement" -> "default";
  "compound-statement" -> "{";
  "compound-statement" -> "}";
  "compound-statement" -> "declaration-list";
  "compound-statement" -> "statement-list";
  "declaration-list" -> "declaration";
  "declaration-list" -> "declaration-list";
  "statement-list" -> "statement";
  "statement-list" -> "statement-list";
  "expression-statement" -> ";";
  "expression-statement" -> "expression";
  "selection-statement" -> "if";
  "selection-statement" -> "(";
  "selection-statement" -> "expression";
  "selection-statement" -> ")";
  "selection-statement" -> "statement";
  "selection-statement" -> "else";
  "selection-statement" -> "switch";
  "iteration-statement" -> "while";
  "iteration-statement" -> "(";
  "iteration-statement" -> "expression";
  "iteration-statement" -> ")";
  "iteration-statement" -> "statement";
  "iteration-statement" -> "do";
  "iteration-statement" -> ";";
  "iteration-statement" -> "for";
  "jump-statement" -> "goto";
  "jump-statement" -> "identifier";
  "jump-statement" -> ";";
  "jump-statement" -> "continue";
  "jump-statement" -> "break";
  "jump-statement" -> "return";
  "jump-statement" -> "expression";
  "translation-unit" -> "external-declaration";
  "translation-unit" -> "translation-unit";
  "external-declaration" -> "function-definition";
  "external-declaration" -> "declaration";
  "function-definition" -> "declarator";
  "function-definition" -> "compound-statement";
  "function-definition" -> "declaration-sepcifiers";
  "function-definition" -> "declaration-list";
  "function-definition" -> "declaration-specifiers";
}